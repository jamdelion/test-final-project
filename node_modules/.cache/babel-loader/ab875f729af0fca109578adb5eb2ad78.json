{"ast":null,"code":"import _slicedToArray from \"/home/jo/Code/FAC/final-project/react-express-starter/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/home/jo/Code/FAC/final-project/react-express-starter/src/components/Write.jsx\";\nimport React from \"react\";\nimport { Link, withRouter } from \"react-router-dom\";\nimport Nav from \"./Navbar.jsx\";\nimport voice from \"../images/voice.svg\";\nimport send from \"../images/send.svg\";\nimport profile from \"../images/profile.svg\";\n\nvar fetch = require(\"node-fetch\");\n\nvar dotenv = require(\"dotenv\");\n\ndotenv.config();\n\nfunction Write() {\n  var _React$useState = React.useState(\"\"),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      messageContent = _React$useState2[0],\n      setMessageContent = _React$useState2[1];\n\n  var testMessage = {\n    channel: \"\".concat(process.env.REACT_APP_SLACK_CHANNEL_ID),\n    text: \"\".concat(messageContent)\n  }; // function sendSlackbotStartMsg(messageData) {\n  //   console.log(process.env.REACT_APP_INCOMING_WEBHOOK_URL)\n  //   fetch(`${process.env.REACT_APP_INCOMING_WEBHOOK_URL}`, {\n  //     method: \"POST\",\n  //     headers: {\n  //       \"content-type\": \"application/json\",\n  //       Authorization: \"Bearer \" + process.env.REACT_APP_BOT_USER_OAUTH_TOKEN,\n  //     },\n  //     body: JSON.stringify(messageData),\n  //   })\n  //     .then((response) => {\n  //       if (!response.ok) throw new Error(response.status);\n  //       return response;\n  //     })\n  //     .then((res) => console.log(res.status, res.statusText))\n  //     .catch((error) => console.error(error));\n  // }\n\n  function sendSlackbotStartMsg(messageData) {\n    fetch(\"/api/slack\", {\n      method: \"POST\",\n      headers: {\n        \"content-type\": \"application/json\",\n        Authorization: \"Bearer \" + process.env.REACT_APP_BOT_USER_OAUTH_TOKEN\n      },\n      body: JSON.stringify(messageData)\n    }).then(function (response) {\n      if (!response.ok) throw new Error(response.status);\n      return response;\n    }).then(function (res) {\n      return console.log(res.status, res.statusText);\n    }).catch(function (error) {\n      return console.error(error);\n    });\n  }\n\n  function handleSubmit(event) {\n    event.preventDefault();\n    fetch('/api/slack').then(function (response) {\n      return response.json();\n    });\n  }\n\n  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"button\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"a\", {\n    href: \"/messages\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 9\n    }\n  }, \"Go back\")), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"messageContainer\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"messageTo\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 9\n    }\n  }, \"To: Jo\", /*#__PURE__*/React.createElement(\"img\", {\n    className: \"avatar\",\n    src: profile,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 11\n    }\n  })), /*#__PURE__*/React.createElement(\"form\", {\n    action: \"/api/slack\",\n    method: \"POST\",\n    onChange: function onChange(event) {\n      return setMessageContent(event.target.value);\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"textarea\", {\n    placeholder: \"Start typing...\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 11\n    }\n  }), /*#__PURE__*/React.createElement(\"button\", {\n    type: \"button\",\n    onClick: handleSubmit,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 11\n    }\n  }, \"Send\"), /*#__PURE__*/React.createElement(\"a\", {\n    href: \"/success\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"img\", {\n    src: send,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 13\n    }\n  }), \"Send\")), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"msgButtons\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"a\", {\n    href: \"/speak\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"img\", {\n    src: voice,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(\"span\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 13\n    }\n  }, \"Press here to speak your message \")))), /*#__PURE__*/React.createElement(Nav, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 7\n    }\n  }));\n}\n\nexport default Write; //  <form action=\"post-review\" method=\"POST\"","map":{"version":3,"sources":["/home/jo/Code/FAC/final-project/react-express-starter/src/components/Write.jsx"],"names":["React","Link","withRouter","Nav","fetch","require","dotenv","config","Write","useState","messageContent","setMessageContent","testMessage","channel","process","env","REACT_APP_SLACK_CHANNEL_ID","text","sendSlackbotStartMsg","messageData","method","headers","Authorization","REACT_APP_BOT_USER_OAUTH_TOKEN","body","JSON","stringify","then","response","ok","Error","status","res","console","log","statusText","catch","error","handleSubmit","event","preventDefault","json","profile","target","value","send","voice"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport { Link, withRouter } from \"react-router-dom\";\nimport Nav from \"./Navbar.jsx\";\nimport voice from \"../images/voice.svg\";\nimport send from \"../images/send.svg\";\nimport profile from \"../images/profile.svg\";\nconst fetch = require(\"node-fetch\");\nconst dotenv = require(\"dotenv\");\ndotenv.config();\n\nfunction Write() {\n  const [messageContent, setMessageContent] = React.useState(\"\");\n  let testMessage = {\n    channel: `${process.env.REACT_APP_SLACK_CHANNEL_ID}`,\n    text: `${messageContent}`,\n  };\n\n  // function sendSlackbotStartMsg(messageData) {\n  //   console.log(process.env.REACT_APP_INCOMING_WEBHOOK_URL)\n  //   fetch(`${process.env.REACT_APP_INCOMING_WEBHOOK_URL}`, {\n  //     method: \"POST\",\n  //     headers: {\n  //       \"content-type\": \"application/json\",\n  //       Authorization: \"Bearer \" + process.env.REACT_APP_BOT_USER_OAUTH_TOKEN,\n  //     },\n  //     body: JSON.stringify(messageData),\n  //   })\n  //     .then((response) => {\n  //       if (!response.ok) throw new Error(response.status);\n  //       return response;\n  //     })\n  //     .then((res) => console.log(res.status, res.statusText))\n  //     .catch((error) => console.error(error));\n  // }\n\n  function sendSlackbotStartMsg(messageData) {\n    fetch(`/api/slack`, {\n      method: \"POST\",\n      headers: {\n        \"content-type\": \"application/json\",\n        Authorization: \"Bearer \" + process.env.REACT_APP_BOT_USER_OAUTH_TOKEN,\n      },\n      body: JSON.stringify(messageData),\n    })\n      .then((response) => {\n        if (!response.ok) throw new Error(response.status);\n        return response;\n      })\n      .then((res) => console.log(res.status, res.statusText))\n      .catch((error) => console.error(error));\n  }\n\n  function handleSubmit(event) {\n    event.preventDefault();\n    fetch('/api/slack')\n      .then(response => response.json());\n  }\n\n  return (\n    <>\n      <button>\n        <a href=\"/messages\">Go back</a>\n      </button>\n      <div className=\"messageContainer\">\n        <div className=\"messageTo\">\n          To: Jo\n          <img className=\"avatar\" src={profile}></img>\n        </div>\n        <form action=\"/api/slack\" method=\"POST\" onChange={(event) => setMessageContent(event.target.value)}>\n          <textarea placeholder=\"Start typing...\"></textarea>\n          <button type=\"button\" onClick={handleSubmit}>Send</button>\n          <a href=\"/success\">\n            <img src={send}></img>\n            Send\n          </a>\n\n          {/* <button\n            type=\"submit\"\n            onClick={() => {\n              console.log(\"works\");\n              sendSlackbotStartMsg(testMessage);\n            }}\n          ></button> */}\n        </form>\n        <div className=\"msgButtons\">\n          <a href=\"/speak\">\n            {/* we should change this to be state based rather than page */}\n            <img src={voice}></img>\n            <span>Press here to speak your message </span>\n          </a>\n        </div>\n      </div>\n      <Nav />\n    </>\n  );\n}\n\nexport default Write;\n\n\n//  <form action=\"post-review\" method=\"POST\""]},"metadata":{},"sourceType":"module"}